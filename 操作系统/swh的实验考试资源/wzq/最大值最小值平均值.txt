//它使用了 POSIX 线程 (pthread) 来并行计算一组整数的平均值、最大值和最小值。这个程序接受一组从命令行输入的整数，然后创建三个线程来分别计算这些整数的平均值、最大值和最小值。

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>

int *list; // 整数列表
double average; // 线程计算的平均值
int maximum; // 线程计算的最大值
int minimum; // 线程计算的最小值

// 函数声明
void *calculate_average(void *param);
void *calculate_maximum(void *param);
void *calculate_minimum(void *param);

int main(int argc, char *argv[]) {
    int i;
    int num_of_args = argc - 1;

    pthread_t tid_1;
    pthread_t tid_2;
    pthread_t tid_3;

    // 分配内存以容纳整数数组
    list = malloc(sizeof(int) * num_of_args);

    for (i = 0; i < num_of_args; i++)
    //将字符串传入的字符串转换为整型
        list[i] = atoi(argv[i + 1]);


    // 创建三个线程来执行计算
    pthread_create(&tid_1, NULL, calculate_average, &num_of_args);
    pthread_create(&tid_2, NULL, calculate_maximum, &num_of_args);
    pthread_create(&tid_3, NULL, calculate_minimum, &num_of_args);

    // 等待线程完成
    pthread_join(tid_1, NULL);
    pthread_join(tid_2, NULL);
    pthread_join(tid_3, NULL);

    // 打印结果
    printf("平均值为 %f\n", average);
    printf("最大值为 %d\n", maximum);
    printf("最小值为 %d\n", minimum);

    return 0;
}

// 计算列表的平均值
void *calculate_average(void *param) {
    int count = *(int *)param;
    int i, total = 0;
    for (i = 0; i < count; i++) {
        total += list[i];
    }
    average = total / (double)count; // 计算平均值为 double 类型
    pthread_exit(0);
}

// 计算列表的最大值
void *calculate_maximum(void *param) {
    int count = *(int *)param;
    int i;
    maximum = list[0];

    for (i = 1; i < count; i++) {
        if (list[i] > maximum) {
            maximum = list[i];
        }
    }
    pthread_exit(0);
}

// 计算列表的最小值
void *calculate_minimum(void *param) {
    int count = *(int *)param;
    int i;
    minimum = list[0];

    for (i = 1; i < count; i++) {
        if (list[i] < minimum) {
            minimum = list[i];
        }
    }
    pthread_exit(0);
}
